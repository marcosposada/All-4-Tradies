<?php eval(base64_decode("class Biztech_Auspost_Helper_Data extends Mage_Core_Helper_Abstract
    {
        public function buildHttpQuery($query)
        {
            $query_array = array();
            foreach($query as $key => $key_value)
                $query_array[] = $key . '=' . urlencode( $key_value );
            return implode( '&', $query_array );
        }

        public function parseXml($xmlString)
        {
            libxml_use_internal_errors(true);
            $xmlObject = simplexml_load_string($xmlString);
            $result = array ();
            if (!empty($xmlObject))
                $this->convertXmlObjToArr($xmlObject, $result);
            return $result;
        }

        public function convertXmlObjToArr($obj, &$arr)
        {
            $children = $obj->children();
            $executed = false;
            foreach ($children as $elementName => $node)
            {
                if(is_array($arr) && array_key_exists( $elementName , $arr ) )
                {
                    if(is_array($arr[$elementName])&& array_key_exists( 0 ,$arr[$elementName] ) )
                    {
                        $i = count($arr[$elementName]);
                        $this->convertXmlObjToArr ($node, $arr[$elementName][$i]);
                    }
                    else
                    {
                        $tmp = $arr[$elementName];
                        $arr[$elementName] = array();
                        $arr[$elementName][0] = $tmp;
                        $i = count($arr[$elementName]);
                        $this->convertXmlObjToArr($node, $arr[$elementName][$i]);
                    }
                }
                else
                {
                    $arr[$elementName] = array();
                    $this->convertXmlObjToArr($node, $arr[$elementName]);   
                }
                $executed = true;
            }
            if(!$executed&&$children->getName()=="")
            {
                $arr = (String)$obj;
            }
            return ;
        }

        public function ausPostValidation($url, $headers = array (), $auth = true) 
        {
            $api_key  = Mage::getStoreConfig('carriers/auspost/auspost_api_key');
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL,$url);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                    'Auth-Key: ' . $api_key
                ));
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            $contents = curl_exec ($ch);
            curl_close ($ch);
            return $contents;
        }


        public function checkKey($k,$dom,$s = ''){
            $ch = curl_init();
            $domainname = urlencode(implode(',', $dom));
            curl_setopt($ch, CURLOPT_URL, sprintf('http://store.biztechconsultancy.com/extension/checkkey.php'));
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, 'key='.urlencode($k).'&domains='.$domainname.'&sec=australianpost');
            curl_setopt($ch, CURLOPT_TIMEOUT, 30);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
            $content = curl_exec($ch);
            $res = Zend_Json::decode($content);
            $modulestatus = new Mage_Core_Model_Config();
            $enc = Mage::helper('core');
            if(empty($res)){
                $modulestatus->saveConfig('auspost/activation/key', "");
                $modulestatus->saveConfig('carriers/auspost/active', 0);
                $data = Mage::getStoreConfig('auspost/activation/data');
                $groups = array(
                    'activation'=>array(
                        'fields'=>array(
                            'data'=>array(
                                'value'=>$data
                            ),
                            'websites'=>array(
                                'value'=>(string)Mage::getStoreConfig('auspost/activation/websites')
                            )                        
                        )
                    )
                );
                Mage::getModel('adminhtml/config_data')
                ->setSection('auspost')
                ->setGroups($groups)
                ->save();
                Mage::getConfig()->reinit();
                Mage::app()->reinitStores();  
                return;
            }
            $data = '';
            $web = '';  
            $en = '';     
            $website_code = Mage::app()->getRequest()->getParam('website');      
            $website = Mage::getModel('core/website')->load($website_code, 'code');   
            if(isset($res['dom']) && isset($res['suc']) ){
                $data = $enc->encrypt(base64_encode(Zend_Json::encode($res)));
                if (!$s)
                { 
                    $params =  Mage::app()->getRequest()->getParam('groups');
                    if(isset($params['activation']['fields']['websites']['value'])){
                        $s = $params['activation']['fields']['websites']['value'];
                    }
                }
                $en = $res['suc'];
                if(isset($s) && $s != null){
                    $web = $enc->encrypt($data.implode(',', $s).$data);
                }else{
                    $web = $enc->encrypt($data.$data);
                }
            }
            else
            {
                if($website_code)
                {
                    $modulestatus->saveConfig('auspost/activation/key', "",'websites',$website->getWebsiteId());
                    $modulestatus->saveConfig('carriers/auspost/active', 0,'websites',$website->getWebsiteId());
                }
                else{
                    $modulestatus->saveConfig('auspost/activation/key', "");
                    $modulestatus->saveConfig('carriers/auspost/active', 0);
                }
            }
            $groups = array(
                'activation'=>array(
                    'fields'=>array(
                        'data'=>array(
                            'value'=>$data
                        ),
                        'websites'=>array(
                            'value'=>(string)$web
                        ),
                        'en'=>array(
                            'value'=>$en
                        ),

                        'installed'=>array(
                            'value'=>1
                        )
                    )
                )
            );
            Mage::getModel('adminhtml/config_data')
            ->setSection('auspost')
            ->setGroups($groups)
            ->setWebsite($website->getCode())
            ->save();
            Mage::getConfig()->reinit();
            Mage::app()->reinitStores();  
        }
        public function getDomains()
        {
            $domains = array();
            foreach (Mage::app()->getWebsites() as $website) {
                $url = $website->getConfig('web/unsecure/base_url');
                if($domain = trim(preg_replace('/^.*?\\/\\/(.*)?\\//', '$1', $url))){
                    $domains[] = $domain;
                }
                $url = $website->getConfig('web/secure/base_url');
                if($domain = trim(preg_replace('/^.*?\\/\\/(.*)?\\//', '$1', $url))){
                    $domains[] = $domain;
                }
            }
            return array_unique($domains);
        }
        public function getDataInfo()
        {
            $websiteId = Mage::app()->getRequest()->getParam('website');
            $data = Mage::app()->getWebsite($websiteId)->getConfig('auspost/activation/data');
            return Zend_Json::decode(base64_decode(Mage::helper('core')->decrypt($data)));
        }

        public function getAllWebsites(){

            if(!Mage::getStoreConfig('auspost/activation/installed'))
            {
                return array();
            }
            $websiteId = Mage::app()->getRequest()->getParam('website');
            $data = Mage::app()->getWebsite($websiteId)->getConfig('auspost/activation/data');
            $web = Mage::app()->getWebsite($websiteId)->getConfig('auspost/activation/websites');
            $websites = explode(',', str_replace($data, '', Mage::helper('core')->decrypt($web)));
            $websites = array_diff($websites, array(""));
            return $websites;
        }

        public function isEnable()
        {
            $storeId = Mage::app()->getRequest()->getParam('store');
            $websiteId =  Mage::getModel('core/store')->load($storeId)->getWebsiteId()  ; 
            $isenabled = Mage::app()->getWebsite($websiteId)->getConfig('carriers/auspost/active');
            if($isenabled){
                if($websiteId){
                    $key = Mage::app()->getWebsite($websiteId)->getConfig('auspost/activation/key');
                    if($key == null || $key == '')
                    {
                        return false; 
                    }else{
                        $en = Mage::app()->getWebsite($websiteId)->getConfig('auspost/activation/en');
                        if($isenabled && $en){return true;}
                        else{ return false; }
                    }
                }
                else{
                    $en = Mage::app()->getWebsite($websiteId)->getConfig('auspost/activation/en');
                    if($isenabled && $en){return true;}
                }
            }
        }
    }"));